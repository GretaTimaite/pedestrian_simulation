---
title: "jps and gcs"
format: html
editor_options: 
  chunk_output_type: inline
---
# Introduction

This notebook is dedicated for comparing densities between GCS and simulated data (using JPS).

# Density

In this section we will compare densities of a jps simulation and gps. We will start approach this in the following way:

1. measure global density
2 measure density of an env split into 4 equally sized polygons:

a. "regular"
b. voronoi

3. measure density of an area by exit 0 and 5

a. "regular"
b. voronoi

# Getting data

```{r, eval = F}
# trajectory data
traj1 = read.table("/Users/gretatimaite/Desktop/pedestrian_simulation/final_results/8_frame/1/traj.txt",
                   col.names = c("ID",	"FR",	"X",	"Y",	"Z",	"A",	"B",	"ANGLE",	"COLOR"))

traj1 |> dplyr::glimpse()

# clean GCS data

gcs = sf::read_sf("https://github.com/GretaTimaite/pedestrian_simulation/releases/download/data/frames_final.csv")
```

```{r, eval = F}
# let's convert jps and gcs dataframes to sf objects, so we can perform spatial operations

traj1_sf = traj1 |> 
  sf::st_as_sf(coords = c("X", "Y")) |> 
  dplyr::select(-c(3,4,5,6,7)) # drop columns we won't need

gcs_sf = gcs |> 
  sf::st_as_sf(coords = c("x_coord", "y_coord")) |> 
  dplyr::mutate(geometry = geometry/14) # convert from pixels to metres

```

# Environment

In this section we will prepare the environment for further analysis.
Concourse parameters: width(x) = 53, height(y) = 50;

## Global
```{r}
# First let's define an area in metres
gcs_env_m = function(){
  plot((-250 /14):(900/14), (-250/14):(900/14), col = "white", xlab = "X", ylab = "Y") # draw an empty plot
  polygon(x = c(0, 0, 740/14, 740/14),
          y = c(0, 700/14, 700/14, 0),
          border = "blue",
          lwd = 2) # draw walls of a GCS
  polygon(x= c(-150/14, 0, 0, -150/14),
          y = c(400/14, 400/14, 150/14, 150/14),
          border = "blue",
          lwd = 2) # exit 0
  polygon(x = c(0, 250/14, 250/14, 0),
          y = c(850/14, 850/14, 700/14, 700/14),
          border = "red",
          lwd = 2) # exit 1
  polygon(x = c(455/14, 700/14, 700/14, 455/14),
          y = c(850/14, 850/14, 700/14, 700/14),
          border = "red",
          lwd = 2) # exit 2
  polygon(x = c(740/14, 860/14, 860/14, 740/14),
          y = c(700/14, 700/14, 610/14, 610/14),
          border = "red",
          lwd = 2) # exit 3
  polygon(x = c(740/14, 860/14, 860/14, 740/14),
          y = c(550/14, 550/14, 400/14, 400/14),
          border = "red",
          lwd = 2) # exit 4
  polygon(x = c(740/14, 860/14, 860/14, 740/14),
          y = c(340/14, 340/14, 190/14, 190/14),
          border = "red",
          lwd = 2) # exit 5
  polygon(x = c(740/14, 860/14, 860/14, 740/14),
          y = c(130/14, 130/14, 0, 0),
          border = "red",
          lwd = 2) # exit 6
  polygon(x = c(555/14, 740/14, 740/14, 555/14),
          y = c(0, 0, -70/14, -70/14),
          border = "red",
          lwd = 2) # exit 7
  polygon(x = c(370/14, 555/14, 556/14, 370/14),
          y = c(0, 0, -70/14, -70/14),
          border = "red",
          lwd = 2) # exit 8
  polygon(x = c(185/14, 370/14, 370/14, 185/14),
          y = c(0, 0, -70/14, -70/14),
          border = "red",
          lwd = 2) # exit 9
  polygon(x = c(0, 185/14, 185/14, 0),
          y = c(0, 0, -70/14, -70/14),
          border = "red",
          lwd = 2) # exit 10
  # polygon(x = c(294, 252, 210, 210, 252, 294, 336, 336, 294),
  #         y = c(294, 294, 336, 378, 420, 420, 378, 336, 294),
  #         col = "red") # information booth (an obstacle)
  plotrix::draw.circle(x = 371/14, y = 280/14, 
                       radius = 56/14, 
                       col = "red") # obstacle 
  # annotation of a plot
  text(x = -84/14,
       y = 252/14,
       label = "Exit 0",
       srt = 90)
  text(x = 112/14,
       y = 770/14,
       label = "Exit 1")
  text(x = 560/14,
       y = 770/14,
       label = "Exit 2")
  text(x = 784/14,
       y = 630/14,
       label = "Exit 3",
       srt = -90)
  text(x = 784/14,
       y = 455/14,
       label = "Exit 4",
       srt = -90)
  text(x = 784/14,
       y = 252/14,
       label = "Exit 5",
       srt = -90)
  text(x = 784/14, 
       y = 42/14,
       label = "Exit 6",
       srt = -90)
  text(x = 630/14,
       y = -49/14,
       label = "Exit 7")
  text(x = 448/14,
       y = -49/14,
       label = "Exit 8")
  text(x = 266/14, 
       y = -49/14,
       label = "Exit 9")
  text(x = 63/14,
       y = -49/14,
       label = "Exit 10")
}
gcs_env_m()
```

```{r, eval = F}
# now, let's convert the env into an sf object
matrix_walls = matrix(c(0,0,0,50,53,50, 53,0,0,0),
                      ncol = 2,
                      byrow = TRUE)
matrixlist_walls = list(matrix_walls)
polygon_walls = sf::st_polygon(matrixlist_walls)

# calculate area size (will be needed for measuring density)
gcs_area = polygon_walls |> sf::st_area()
```


## Divided

```{r, eval = F}
# divide gcs polygon by creating a grid
gcs_div = sf::st_make_grid(polygon_walls, 
                           n = 2,
                           what = "polygons")

# convert gcs_div to an sf object
gcs_div_sf = gcs_div |> 
  sf::st_as_sf() |> 
  dplyr::rename(geom = x)

# find out the area size of each polygon
gcs_area_div = list()
for (i in 1:lengths(gcs_div_sf)){
  gcs_area_div[[i]] = sf::st_area(gcs_div_sf[[i]]) 
  # print(gcs_area_div)
}
# make it a vector
gcs_area_div = gcs_area_div |>
  unlist() |>
  as.vector()
```


## Selected

Two areas have been selected based on the results of the previous work: https://github.com/Urban-Analytics/uncertainty/blob/master/gcs/process.ipynb
Hence, it's zone 1 (exit 0) and zone 2 (around exit 5)
One cell is 2x2, each zone is 5 (width) and 6 (length) cells, thus 10 and 12 metres accordingly

Zone 1 is next to exit 0, thus its length has been left equal to the length of the gates. The width has been approximated to 10 metres (1 pixel = 2 metres).

Zone 2 is on the opposite side to Zone 1 and is 1 pixel below comapred to Zone 1, thus around exit 5. 

```{r, eval = F}
## zone 1 (it's next to exit 0)
gcs_env_m()
polygon(x = c(10, 0, 0, 10),
        y = c(28, 28, 10, 10),
        border = "blue",
        lwd = 2)

## zone 2
# gcs_env_m()
polygon(x = c(53, 43, 43, 53),
        y = c(26, 26, 8, 8),
        border = "blue",
        lwd = 2)

# zone 1 sf polygon
zone1_matrix = matrix(c(10, 28, 0, 28, 0, 10, 10, 10, 10, 28),
                      ncol = 2,
                      byrow = T)
zone1_matrix_list = list(zone1_matrix)
zone1 = sf::st_polygon(zone1_matrix_list)

# zone 2 sf polygon
zone2_matrix = matrix(c(53, 26, 43, 26, 43, 8, 53, 8, 53, 26),
                      ncol = 2,
                      byrow = T)
zone2_matrix_list = list(zone2_matrix)
zone2 = sf::st_polygon(zone2_matrix_list)

# checking where selected areas are
gcs_env_m()
zone1 |> plot(add = T, border = "green", lwd = 2)
zone2 |> plot(add = T, border = "green", lwd = 2)
```

# Flow

## 1. Global flow

```{r}
# now let's create a new column for seconds
# 1 second = 25 frames
gcs_sf_s = gcs_sf |> 
  dplyr::mutate(sec = as.numeric(frame) / 25)

# group df by seconds
gcs_grouped = gcs_sf_s |> 
  sf::st_drop_geometry() |> #drop geometry as it's not needed here
  dplyr::group_by(sec) |> # group by seconds
  dplyr::summarise(n = dplyr::n()) # summarise 

gcs_grouped |> 
  head()
```

### Plotting

```{r}

gcs_flow_plot = ggplot2::ggplot(gcs_grouped) +
  ggplot2::aes(x = sec,
               y = n) +
  ggplot2::geom_line()
gcs_flow_plot 

```

We could add add additional information by adding lines indicating mean and median for seconds and number of agents, but I'm not sure it tells us much...

```{r}
# let's calculate mean and median values of n to add to the plot
gcs_mean_s = gcs_sf_s$sec |> mean()
gcs_median_s = gcs_sf_s$sec |> median()
gcs_mean_n = gcs_grouped$n |> mean()
gcs_median_n = gcs_grouped$n |> median()

ggplot2::ggplot(gcs_grouped) +
  ggplot2::aes(x = sec,
               y = n) +
  ggplot2::geom_line() +
  ggplot2::geom_vline(xintercept = gcs_mean_s,
                      col = "red") +
  ggplot2::geom_text(ggplot2::aes(x=gcs_mean_s+5, label=paste0("Mean\n",round(gcs_mean_s,2)), y=80)) +
  ggplot2::geom_vline(xintercept = gcs_median_s, 
                      col = "blue") +
  ggplot2::geom_hline(yintercept = gcs_mean_n,
                      col = "red") +
  ggplot2::geom_hline(yintercept = gcs_median_n,
                      col = "blue")
```

## 2. Divided flow

```{r}
# first create a list to store our multiple dataframes
gcs_joined = list()
for (i in 1:lengths(gcs_div_sf)){
  gcs_joined[[i]] = gcs_sf_s[gcs_div_sf[i,], op = sf::st_intersects] # all intersecting points will be selected
}

# sanity check
gcs_joined1 = gcs_sf_s[gcs_div_sf[1,], op = sf::st_intersects]
gcs_joined2 = gcs_sf_s[gcs_div_sf[2,], op = sf::st_intersects]
identical(gcs_joined1, gcs_joined[[1]]) # TRUE
identical(gcs_joined2, gcs_joined[[2]]) # TRUE
```

```{r}
# group each sf object by seconds and make a list out of them
gcs_joined_grouped = list()
for (i in 1:length(gcs_joined)){
  gcs_joined_grouped[[i]] = gcs_joined[[i]] |> 
    sf::st_drop_geometry() |> 
    dplyr::group_by(sec) |> 
    dplyr::summarise(n = dplyr::n())
}

# sanity check comparison (alert: ugly code!)
identical(gcs_joined_grouped[[1]], # first list of a list that was just made
          gcs_joined[[1]] |> # repeating the same code as in the loop above but only on 1 (the first) list 
            sf::st_drop_geometry() |> 
            dplyr::group_by(sec) |> 
            dplyr::summarise(n = dplyr::n()))
```

In the plot showing flow in the entire GCS environment, I added means and medians but this time I will exclude them as I do not know if it's valuable to have them at this stage. Plus, it will make the code shorter.

```{r}
# let's create a list of plots showing flow in each polygon
plots = list()
for (i in 1:length(gcs_joined_grouped)){
  plots[[i]] = ggplot2::ggplot(gcs_joined_grouped[[i]]) +
    ggplot2::aes(x = sec,
                 y = n) +
    ggplot2::geom_line() 
  # print(plots)
}
```

```{r}
# let's plot a polygons 1-4 and 12-15
gridExtra::grid.arrange(plots[[1]], plots[[2]],plots[[3]],plots[[4]], layout_matrix = rbind(c(1,2),c(3,4)))
```




## 1. global density

In this section we will found out the global density of our areas. 
Hypothesis: I expect them to be similar, given the (almost) same number of agents present in both environments.

Density = N / m2

N = number of agents

## GCS density

First, polygon area needs to be measured and then density can be found.
```{r}
# group by seconds and then measure density
gcs_d = gcs_sf |> 
  sf::st_drop_geometry() |> 
  dplyr::mutate(sec = as.numeric(frame)/25) |>  # 1 sec = 25 frames
  dplyr::group_by(sec) |> 
  dplyr::summarise(n = dplyr::n(),
                   frame = frame) |> 
  dplyr::mutate(
    density = n / gcs_walls_area 
  )

gcs_d |> head()
```










### JPS

```{r, eval = F}
# define a function to polygonise deldir tiles
tiles_pol = function(deldir_tiles = list()){
  list_xy = list()
  list_sf = list()
  list_comb = list()
  list_pol = list()
  for (i in 1:length(deldir_tiles)){
    list_xy[[i]] = data.frame("x" = deldir_tiles[[i]][["x"]],
                              "y" = deldir_tiles[[i]][["y"]])
  }
  for (i in 1:length(list_xy)){
    list_sf[[i]] = list_xy[[i]] |>
      sf::st_as_sf(coords = c("x", "y"))
  }
  
  for (i in 1:length(list_sf)){
    list_comb[[i]] = sf::st_combine(list_sf[[i]])
  }
  for (i in 1:length(list_comb)){
    list_pol[[i]] = list_comb[[i]] |> sf::st_cast("POLYGON")
  }
  return(list_pol)
}

  
function_pol = function(jps_df = data.frame()){
  jps_df = jps_df |> 
    dplyr::mutate(FR = FR + 1)
  frames_list = list()
  # a vector of unique frames that we will use to loop over
  unique_frames = unique(jps_df$FR)
  # for loop
  for (i in 1:length(unique_frames)){
    frames_list[[i]] = jps_df[jps_df$FR == i,] 
  }

  deldir_frames = list()
  deldir_tiles = list()
  for (i in 1:length(frames_list)){
    if(is.null(frames_list[[i]]) == FALSE) { # if list IS NOT NULL, then
      deldir_frames[[i]] = deldir::deldir(x = as.numeric(unlist(frames_list[[i]]["X"])),
                                          y = as.numeric(unlist(frames_list[[i]]["Y"])),
                                          rw = c(0, 53, 0, 50)) #in metres
      deldir_tiles[[i]] = deldir::tile.list(deldir_frames[[i]])
    }
    else{ # if list is NULL then skip
      next
    }
  }
  list = list()
  for (i in 1:length(deldir_tiles)){
    if(is.null(deldir_tiles[[i]]) == FALSE){
      list[[i]] = deldir_tiles[[i]] |> tiles_pol()
    }
  }

  deldir_pol = list()
  for (i in 1:length(list)){
    if (is.null(list[[i]]) == FALSE){
      for (k in 1:length(list[[i]])){
        deldir_pol[[i]] = do.call(c, list[[i]])
      }
    }
  }
  return(deldir_pol)
} 

# concourse parameters: width(x) = 53, height(y) = 50;
gcs_env_m = function(){
  plot(-10:60, -10:60, col = "white", xlab = "X", ylab = "Y") # draw an empty plot
  polygon(x = c(0, 0, 53, 53),
          y = c(0, 50, 50,0),
          border = "black",
          lwd = 2) # draw walls of a GCS
  polygon(x= c(0, -3, -3, 0),
          y = c(7, 7, 25, 25),
          border = "red",
          lwd = 2) # exit 10
  polygon(x = c(0, 0, 11, 11),
          y = c(50, 53, 53, 50),
          border = "red",
          lwd = 2) # exit 9
  polygon(x = c(11, 11, 33, 33),
          y = c(50, 53, 53, 50),
          border = "red",
          lwd = 2) # exit 8
  polygon(x = c(33, 33, 48.5, 48.5),
          y = c(50, 53, 53, 50),
          border = "red",
          lwd = 2) # exit 7
  polygon(x = c(53, 56, 56, 53),
          y = c(50, 50, 46.5, 46.5),
          border = "red",
          lwd = 2) # exit 6
  polygon(x = c(53, 56, 56, 53),
          y = c(40, 40, 29, 29),
          border = "red",
          lwd = 2) # exit 5
  polygon(x = c(53, 56, 56, 53),
          y = c(22, 22, 10, 10),
          border = "red",
          lwd = 2) # exit 4
  polygon(x = c(53, 56, 56, 53),
          y = c(4.5, 4.5, 0, 0),
          border = "red",
          lwd = 2) # exit 3
  polygon(x = c(53, 53, 33, 33),
          y = c(0, -3, -3, 0),
          border = "red",
          lwd = 2) # exit 2
  polygon(x = c(33, 33, 11, 11),
          y = c(0, -3, -3, 0),
          border = "red",
          lwd = 2) # exit 1
  polygon(x = c(11, 11, 0, 0),
          y = c(0, -3, -3, 0),
          border = "red",
          lwd = 2) # exit 0
  # polygon(x = c(21, 18, 15, 15, 18, 21, 24, 24, 21),
  #         y = c(21, 21, 24, 27, 30, 30, 27, 24, 21),
  #         col = "red") # information booth (an obstacle)
    plotrix::draw.circle(x = 24.6, y = 20, 
                       radius = 2, 
                       col = "red") # obstacle 
  # annotation of a plot
  text(x = -4,
       y = 15,
       label = "Exit 10",
       srt = 90)
  text(x = 7,
       y = 55,
       label = "Exit 9")
  text(x = 20,
       y = 55,
       label = "Exit 8")
  text(x = 40,
       y = 55,
       label = "Exit 7")
  text(x = 57,
       y = 48,
       label = "Exit 6",
       srt = -90)
  text(x = 57,
       y = 34,
       label = "Exit 5",
       srt = -90)
  text(x = 57,
       y = 15,
       label = "Exit 4",
       srt = -90)
  text(x = 57,
       y = 2,
       label = "Exit 3",
       srt = -90)
  text(x = 45,
       y = -5,
       label = "Exit 2")
  text(x = 22,
       y = -5,
       label = "Exit 1")
  text(x = 6,
       y = -5,
       label = "Exit 0")
}
gcs_env_m()
  
```

```{r, eval = F}
traj1_voronoi = traj1 |> function_pol()
# saveRDS(traj1_voronoi,
#         "traj1_voronoi.RDS")

# plot testing
gcs_env_m()
traj1_voronoi[[540]] |> plot(add = T)
```

```{r, eval = F}
## define areas of measure based on this: https://github.com/Urban-Analytics/uncertainty/blob/master/gcs/process.ipynb
# hence, it's zone 1 (exit 10) and zone 2 (around exit 4)
# one cell is 2x2, each zone is 5 (width) and 6 (length) cells, thus 10 and 12 metres accordingly

# polygon of exit 10
# polygon(x= c(0, -3, -3, 0),
#         y = c(7, 7, 25, 25),
#         border = "red",
#         lwd = 2) # exit 10

# polygon of exit 4
# polygon(x = c(53, 56, 56, 53),
#         y = c(22, 22, 10, 10),
#         border = "red",
#         lwd = 2) # exit 4

## zone 1
gcs_env_m()
polygon(x = c(0, 10, 10, 0),
        y = c(7, 7, 25, 25),
        border = "blue",
        lwd = 2)

## zone 2 
polygon(x = c(53, 43, 43, 53),
        y = c(22, 22, 10, 10),
        border = "blue",
        lwd = 2)

# zone 1 sf polygon
zone1_matrix = matrix(c(0, 7, 10, 7, 10, 25, 0, 25, 0, 7),
                      ncol = 2,
                      byrow = T)
zone1_matrix_list = list(zone1_matrix)
zone1 = sf::st_polygon(zone1_matrix_list)

# zone 2 sf polygon
zone2_matrix = matrix(c(53, 22, 43, 22, 43, 10, 53, 10, 53,22),
                      ncol = 2,
                      byrow = T)
zone2_matrix_list = list(zone2_matrix)
zone2 = sf::st_polygon(zone2_matrix_list)

# checking where selected areas are

gcs_env_m()
zone1 |> plot(add = T, border = "blue", lwd = 2)
zone2 |> plot(add = T, border = "blue", lwd = 2)
```


```{r, eval = F}
## let's find out what is intersected with each polygon per traj df
traj1_zone1 = list()
for(i in 1:length(traj1_voronoi)){
  traj1_zone1[[i]] = sf::st_intersection(traj1_voronoi[[i]],
                                        zone1)
}
traj1_zone2 = list()
for(i in 1:length(traj1_voronoi)){
  traj1_zone2[[i]] = sf::st_intersection(traj1_voronoi[[i]],
                                        zone2)
}

# plot test
gcs_env_m()
traj1_zone1[[432]] |> plot(add = T)
traj1_zone2[[432]] |> plot(add = T)

```

```{r, eval = F}
# find out the area size of each polygon; it will be needed to measure densities
zone1_area = sf::st_area(zone1)
zone2_area = sf::st_area(zone2)

```

```{r, eval = F}
# zone 1
voronoi_density1_temp = vector()
voronoi_density1 = data.frame()
for (i in 1:length(traj1_zone1)){
  # if(is.null(gcs_deldir1[[i]]) == FALSE){
    voronoi_density1_temp[i] = length(traj1_zone1[[i]]) / zone1_area
    voronoi_density1 = as.data.frame("x" = voronoi_density1_temp) |> 
      dplyr::mutate(frame = dplyr::row_number(),
                    sec = frame / 25)
    colnames(voronoi_density1) = c("density", "frame", "sec")
  # }
}
```

```{r, eval = F}
# zone 2
voronoi_density2_temp = vector()
voronoi_density2 = data.frame()
for (i in 1:length(traj1_zone2)){
  # if(is.null(gcs_deldir1[[i]]) == FALSE){
    voronoi_density2_temp[i] = length(traj1_zone2[[i]]) / zone2_area
    voronoi_density2 = as.data.frame("x" = voronoi_density2_temp) |> 
      dplyr::mutate(frame = dplyr::row_number(),
                    sec = frame / 25)
    colnames(voronoi_density2) = c("density", "frame", "sec")
  # }
}
```

```{r, eval = F}
ggplot2::ggplot(voronoi_density1)+ # zone 1
  ggplot2::aes(x = sec,
               y = density)+
  ggplot2::geom_line() +
  ggplot2::geom_line(data = voronoi_density2, # zone 2
                     color = "red")

```

## GCS

```{r, eval = F}
deldir_pol = readRDS("/Users/gretatimaite/Desktop/pedestrian_simulation/deldir_pol.RDS")

```

```{r, eval = F}
## let's find out what is intersected with each polygon per gcs
gcs_zone1 = list()
for (k in 1:length(deldir_pol)){
   if (k > 43 &
       k < length(deldir_pol) + 1){
     gcs_zone1[[k]] = sf::st_intersection(deldir_pol[[k]],
                                          zone1)
   }
}

gcs_zone2 = list()
for (k in 1:length(deldir_pol)){
   if (k > 43 &
       k < length(deldir_pol) + 1){
     gcs_zone2[[k]] = sf::st_intersection(deldir_pol[[k]],
                                          zone2)
   }
}


# plot test
gcs_env_m()
gcs_zone1[[4320]] |> plot(add = T)
gcs_zone2[[432]] |> plot(add = T)

gcs_zone1 |> lengths() |> table()
gcs_zone2 |> lengths() |> table()

```
there's a problem that a majority of lists do not contain any agents in zone 1.
Should I remove such lists? But if so, then only about 360 lists remain for which density can be measured

```{r, eval = F}
# zone 1
voronoi_density1_temp_gcs = vector()
voronoi_density1_gcs = data.frame()
for (i in 1:length(gcs_zone1)){
  if(is.null(gcs_zone1[[i]]) == FALSE){
    voronoi_density1_temp_gcs[i] = length(gcs_zone1[[i]]) / zone1_area
    voronoi_density1_gcs = as.data.frame("x" = voronoi_density1_temp_gcs) |> 
      dplyr::mutate(frame = dplyr::row_number(),
                    sec = frame / 25)
    colnames(voronoi_density1_gcs) = c("density", "frame", "sec")
  }
}

# zone 2
voronoi_density2_temp_gcs = vector()
voronoi_density2_gcs = data.frame()
for (i in 1:length(gcs_zone2)){
  if(is.null(gcs_zone2[[i]]) == FALSE){
    voronoi_density2_temp_gcs[i] = length(gcs_zone2[[i]]) / zone2_area
    voronoi_density2_gcs = as.data.frame("x" = voronoi_density2_temp_gcs) |> 
      dplyr::mutate(frame = dplyr::row_number(),
                    sec = frame / 25)
    colnames(voronoi_density2_gcs) = c("density", "frame", "sec")
  }
}
```

```{r, eval = F}
ggplot2::ggplot(voronoi_density1_gcs)+
  ggplot2::aes(x = sec,
               y = density)+
  ggplot2::geom_line() +
  ggplot2::geom_line(data = voronoi_density2_gcs, color = "red")
```
This looks horrendous. 

# speed

## gcs

```{r, eval = F}
# gcs_speed = readRDS("agent_dist_list.rds")
frames = read.csv("https://github.com/GretaTimaite/pedestrian_simulation/releases/download/data/frames_final.csv")
frames_sf = frames |> sf::st_as_sf(coords = c("x_coord", "y_coord")) |> 
  dplyr::mutate(geometry = geometry/14)

```

```{r, eval = F}
# let's find out which agents when intersect with zone 1 and zone 2
gcs_zone1_speed = sf::st_intersection(frames_sf, zone1)

# measure density
gcs_zone1_speed_frame = gcs_zone1_speed |> 
  dplyr::group_by(frame) |> 
  dplyr::summarise(n = dplyr::n(),        
                   density = n/zone1_area)

```

```{r, eval = F}
# average speed per frame
test = gcs_zone1_speed |> 
  sf::st_drop_geometry() |>
  dplyr::group_by(frame) |> 
  dplyr::summarise(n = dplyr::n()) 
test2 = gcs_zone1_speed|> 
  sf::st_drop_geometry() |> 
  dplyr::filter(dist != 0) |> # filter our starting points (ie the rows that have dist = 0)
  dplyr::group_by(frame) |> 
  dplyr::summarise(dist_sum = sum(dist)) # summing up the total distance of agents in a group
test_joined = dplyr::left_join(test, test2) |> 
  dplyr::mutate(speed_av = dist_sum/n) # average speed (see formula at the start of the notebook)
test_joined2 = dplyr::left_join(test_joined, gcs_zone1_speed_frame)

```

```{r, eval = F}
ggplot2::ggplot(data = test_joined2,
                ggplot2::aes(x = density,
                            y = speed_av))+
  ggplot2::geom_point()
```
## JPS

```{r, eval = F}
traj1_sf = traj1 |> sf::st_as_sf(coords = c("X", "Y"))
## now we'll create a list of dataframes for each agent
# first, let's find out the number of unique agents as this will be the number of dataframes in the list
unique_ids = traj1_sf |> dplyr::pull(ID) |> unique() |> sort()

# create an empty list to store DFs
agent_list_jps = list()
# create a loop
for (i in 1:length(unique_ids)){
  agent_list_jps[[i]] = traj1_sf |> # iterate through frames_sf
    dplyr::filter(ID %in% unique_ids[i]) # filter frames_sf by a unique ID
}

## sanity check
identical(agent_list_jps[[30]],
          traj1_sf |> dplyr::filter(ID %in% unique_ids[30]))
# >TRUE


## Now we will create a matrix of distances for each frame of a given agent. 
# It will be used later in a function to extract the distances sequentially (from frame 1 to frame 2 to frame 3, etc)

distance_matrix_list_jps = list()
# system.time( # to measure how long it takes to run 
for (i in 1:length(agent_list_jps)){
  distance_matrix_list_jps[[i]] = sf::st_distance(agent_list_jps[[i]])
}
# )

# create a function that accepts a list of matrices
dist_function = function(list_matrix = list()){ # accepts lists
  dist_list = list() # empty list to store new lists
  for (i in 1:length(list_matrix)){ # reiteration over the length of a list
    k = i # initialisation of a matrix row
    j = k + 1  # initialisation of a matrix column, it needs to be + 1 compared to the row as otherwise we will get distance equal to 0 
    # (there's no distance traveled from, e.g. frame 2 to frame 2)
    if (j <= ncol(list_matrix)){ # columns should not exceed the number of columns of a matrix (looping (out of bounds) error might be given otherwise)
      dist_list[[i]] = list_matrix[k,j] # for each `i` list extract matrix values at row k and column j 
    }
    else {
      break # break if j is above number of columns of a matrix
    }
  }
  return(dist_list)
}

# an empty list for distance vectors
distance_list_jps = list()
# loop over `distance_matrix_list` and apply a `dist_function()`
# system.time( # to measure how long it takes to run 
for (i in 1:length(distance_matrix_list_jps)){
  distance_list_jps[[i]] = distance_matrix_list_jps[[i]] |> 
    dist_function() |> # apply the new function
    unlist() |> 
    as.data.frame() # create a dataframe (will be useful in later steps)
  colnames(distance_list_jps[[i]]) = "dist" # rename a column
}
# )

# NOTE: each list is shorter by 1 element compared to the original input list because of initialisation starting at 1, thus capturing the distance between frame 1 and 2. 
# In other words, the function omits the starting point at which an agent.

## testing
# here we'll check that the function works as it should.

# finding distance manually
sf::st_distance(agent_list_jps[[5]][1,3], # frame 1 of agent 5
                agent_list_jps[[5]][2,3]) # frame 2 of agent 5
#> [1,] 0
distance_matrix_list_jps[[5]][2,1] # second row in matrix 1 ([1,1] would return 0 as there's the distance from frame 1 to frame 1 equals to 0) of agent 5.
#> [1] 0

## it's time to join distance_list to agents_list
# NOTE: our lists are of unequal row lengths, hence we will have to do two intermediate steps
# first let's create a list to store joined lists
agent_dist_list_jps = list()
# a list to store values of a shorter (intermediate) list of dataframes
dist_list_new_jps = list()
# create a loop
# first we will create an intermediate list of dataframes
for (i in 1:length(agent_list_jps)){
  dist_list_new_jps[[i]] = rbind(data.frame("dist" = 0),
                             distance_list_jps[[i]]) # adding a new row on top of the dataframes in the distance_list, 
  # so their length matches the length of DFs in the agent_list
  agent_dist_list_jps[[i]] = cbind(agent_list_jps[[i]],
                               dist_list_new_jps[[i]]) # joining dataframes by column
}
agent_dist_list_jps[[50]]
agent_list_jps[[50]]
dist_list_new_jps[[50]]
# saveRDS(agent_dist_list_jps,
#         "agent_dist_list_jps.RDS")


## let's unlist agent_dist_list_jps
# a dataframe to store our final output
frames_dist_df_jps = data.frame()
# a bunch of temp_lists for intermediate steps
temp_list = list()
temp_list1 = list()
temp_list2 = list()
  for (i in 1:length(agent_dist_list_jps)){
    temp_list[[i]] = agent_dist_list_jps[[i]][c("dist", "FR", "ID")] |> # extract only columns we need
      sf::st_drop_geometry() |> # drop geometry column
      dplyr::arrange(FR) # arrange by frame (just for sanity's sake to ensure ascending order)
    temp_list1[[i]] = traj1 |> 
      dplyr::filter(ID == unique(agent_dist_list_jps[[i]]$ID)) |>
      dplyr::arrange(FR) # arrange by frame (just for sanity's sake to ensure ascending order)
    temp_list2[[i]] = dplyr::left_join(temp_list[[i]],
                                       temp_list1[[i]],
                                       by = c("FR" = "FR") # join by frame
                                       )
      frames_dist_df_jps = rbind(frames_dist_df_jps, # df to append (add rows to)
                        temp_list2[[i]]) |> # what is being appended
        dplyr::distinct(.keep_all = TRUE) # keeping only distinct (unique) rows. This is needed as the last list gets added twice.
      # I think this is because we need to append to something (empty dataframe does not work), hence it appends the last list in the temp_list2
  }

# A good guess that the join worked is the fact that we have the same rows in both frames_df and newly created frames_dist_df.
## a quick check that a randomly selected list in both temp_list and temp_list1 have identical frames (spoiler alert: yes)
# identical(temp_list[[131]]$frame,
#           temp_list[[131]]$frame)

## another quick check 
# identical(frames_dist_df |> dplyr::filter(ID.x == 121) |> dplyr::select(x_coord),
#           frames_df |> dplyr::filter(ID == 121) |> dplyr::select(x_coord))

# Let's drop one of the ID columns and rename another to a more sensible one
frames_final_jps = frames_dist_df_jps |> 
  dplyr::select(-ID.x) |> 
  dplyr::rename(ID = ID.y)
# save as csv
# write.csv(frames_final_jps,
#           "frames_final_jps.csv")


```

```{r, eval = F}
# average speed per frame
test_jps = frames_final_jps |> 
  dplyr::group_by(FR) |> 
  dplyr::summarise(n = dplyr::n()) 
test2_jps = frames_final_jps |> 
  dplyr::filter(dist != 0) |> # filter our starting points (ie the rows that have dist = 0)
  dplyr::group_by(FR) |> 
  dplyr::summarise(dist_sum = sum(dist)) # summing up the total distance of agents in a group
test_joined_jps = dplyr::left_join(test_jps, test2_jps) |> 
  dplyr::mutate(speed_av = dist_sum/n) # average speed (see formula at the start of the notebook)

den_jps = frames_final_jps |> 
  dplyr::group_by(FR) |> 
  dplyr::summarise(n = dplyr::n(),
                   density = n / gcs_walls_area) 

test_joined2_jps = dplyr::left_join(test_joined_jps, den)

```











